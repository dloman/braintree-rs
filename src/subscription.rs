use elementtree;
use std::convert::From;
use std::io::Read;
use std::fmt::Write;
use xml;

/// A request to retrieve a new client token.
#[derive(Debug)]
pub struct Request {
    /// The plan identifies. Values can use only letters numbers "-" and "_".
    /// Plans must be created in the Contorl Panel
    pub plan_id: Option<String>,
    /// one-time-use reference to a payment method. you can only use if
    /// nonce was generated by drop-in UI and you passed a customer_id when
    /// generating the client token
    pub payment_method_nonce: Option<String>,
}

impl Default for Request {
    fn default() -> Request {
        Request{
            plan_id: None,
            payment_method_nonce: None,
        }
    }
}

impl ::ToXml for Request {
    fn to_xml(&self, name: Option<&str>) -> String {
        let name = xml::escape(&name.unwrap_or("subscription"));
        let mut s = String::new();
        write!(s, "<{}>", name).unwrap();

        write_xml!(s, "plan-id", self.plan_id);
        write_xml!(s, "payment-method-nonce", self.payment_method_nonce);

        write!(s, "<options>" ).unwrap();
        write_xml_type!(s, "start-immediately", "boolean", Some(true));
        write!(s, "</options>" ).unwrap();
        write!(s, "</{}>", name).unwrap();
        s
    }
}

pub struct Subscription {
    /// The value of the client token.
    pub value: String,
}

impl From<Box<dyn Read>> for Subscription {
    fn from(xml: Box<dyn Read>) -> Subscription {
        let root = elementtree::Element::from_reader(xml).unwrap();
        print!("!!!! \n{:?}\n", root);
        Subscription{
            value: String::from(root.find("value").unwrap().text()),
        }
    }
}
